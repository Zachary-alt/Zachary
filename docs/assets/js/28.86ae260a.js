(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{403:function(e,r,t){"use strict";t.r(r);var o=t(42),a=Object(o.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"docker-入门教程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-入门教程"}},[e._v("#")]),e._v(" Docker 入门教程")]),e._v(" "),t("h2",{attrs:{id:"一、环境配置的难题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、环境配置的难题"}},[e._v("#")]),e._v(" 一、环境配置的难题")]),e._v(" "),t("p",[e._v("软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？")]),e._v(" "),t("p",[e._v("用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。")]),e._v(" "),t("p",[e._v('如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说："它在我的机器可以跑了"（It works on my machine），言下之意就是，其他机器很可能跑不了。')]),e._v(" "),t("p",[e._v("环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。")]),e._v(" "),t("h2",{attrs:{id:"二、虚拟机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、虚拟机"}},[e._v("#")]),e._v(" 二、虚拟机")]),e._v(" "),t("p",[e._v("虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。")]),e._v(" "),t("p",[e._v("虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。")]),e._v(" "),t("p",[t("strong",[e._v("（1）资源占用多")])]),e._v(" "),t("p",[e._v("虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。")]),e._v(" "),t("p",[t("strong",[e._v("（2）冗余步骤多")])]),e._v(" "),t("p",[e._v("虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。")]),e._v(" "),t("p",[t("strong",[e._v("（3）启动慢")])]),e._v(" "),t("p",[e._v("启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。")]),e._v(" "),t("h2",{attrs:{id:"三、linux-容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、linux-容器"}},[e._v("#")]),e._v(" 三、Linux 容器")]),e._v(" "),t("p",[e._v("由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。")]),e._v(" "),t("p",[e._v("**Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。**或者说，在正常进程的外面套了一个"),t("a",{attrs:{href:"https://opensource.com/article/18/1/history-low-level-container-runtimes",target:"_blank",rel:"noopener noreferrer"}},[e._v("保护层"),t("OutboundLink")],1),e._v("。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。")]),e._v(" "),t("p",[e._v("由于容器是进程级别的，相比虚拟机有很多优势。")]),e._v(" "),t("p",[t("strong",[e._v("（1）启动快")])]),e._v(" "),t("p",[e._v("容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。")]),e._v(" "),t("p",[t("strong",[e._v("（2）资源占用少")])]),e._v(" "),t("p",[e._v("容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。")]),e._v(" "),t("p",[t("strong",[e._v("（3）体积小")])]),e._v(" "),t("p",[e._v("容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。")]),e._v(" "),t("p",[e._v("总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。")]),e._v(" "),t("h2",{attrs:{id:"四、docker-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、docker-是什么"}},[e._v("#")]),e._v(" 四、Docker 是什么？")]),e._v(" "),t("p",[e._v("**Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。**它是目前最流行的 Linux 容器解决方案。")]),e._v(" "),t("p",[e._v("Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。")]),e._v(" "),t("p",[e._v("总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。")]),e._v(" "),t("h2",{attrs:{id:"五、docker-的用途"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、docker-的用途"}},[e._v("#")]),e._v(" 五、Docker 的用途")]),e._v(" "),t("p",[e._v("Docker 的主要用途，目前有三大类。")]),e._v(" "),t("p",[e._v("**（1）提供一次性的环境。**比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。")]),e._v(" "),t("p",[e._v("**（2）提供弹性的云服务。**因为 Docker 容器可以随开随关，很适合动态扩容和缩容。")]),e._v(" "),t("p",[e._v("**（3）组建微服务架构。**通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。")]),e._v(" "),t("h2",{attrs:{id:"六、docker-架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、docker-架构"}},[e._v("#")]),e._v(" 六、Docker 架构")]),e._v(" "),t("p",[e._v("Docker 包括三个基本概念:")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("镜像（Image）")]),e._v("：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。")]),e._v(" "),t("li",[t("strong",[e._v("容器（Container）")]),e._v("：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。")]),e._v(" "),t("li",[t("strong",[e._v("仓库（Repository）")]),e._v("：仓库可看成一个代码控制中心，用来保存镜像。")])]),e._v(" "),t("p",[e._v("Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。")]),e._v(" "),t("p",[e._v("Docker 容器通过 Docker 镜像来创建。")]),e._v(" "),t("p",[e._v("容器与镜像的关系类似于面向对象编程中的对象与类。")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("概念")]),e._v(" "),t("th",[e._v("说明")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("Docker 镜像(Images)")]),e._v(" "),t("td",[e._v("Docker 镜像是用于创建 Docker 容器的模板，比如 Ubuntu 系统。")])]),e._v(" "),t("tr",[t("td",[e._v("Docker 容器(Container)")]),e._v(" "),t("td",[e._v("容器是独立运行的一个或一组应用，是镜像运行时的实体。")])]),e._v(" "),t("tr",[t("td",[e._v("Docker 客户端(Client)")]),e._v(" "),t("td",[e._v("Docker 客户端通过命令行或者其他工具使用 Docker SDK (https://docs.docker.com/develop/sdk/) 与 Docker 的守护进程通信。")])]),e._v(" "),t("tr",[t("td",[e._v("Docker 主机(Host)")]),e._v(" "),t("td",[e._v("一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。")])]),e._v(" "),t("tr",[t("td",[e._v("Docker Registry")]),e._v(" "),t("td",[e._v("Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub("),t("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://hub.docker.com"),t("OutboundLink")],1),e._v(") 提供了庞大的镜像集合供使用。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 "),t("strong",[e._v("<仓库名>:<标签>")]),e._v(" 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 "),t("strong",[e._v("latest")]),e._v(" 作为默认标签。")])]),e._v(" "),t("tr",[t("td",[e._v("Docker Machine")]),e._v(" "),t("td",[e._v("Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。")])])])]),e._v(" "),t("h2",{attrs:{id:"七、docker-的安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七、docker-的安装"}},[e._v("#")]),e._v(" 七、Docker 的安装")]),e._v(" "),t("p",[e._v("Docker 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。企业版包含了一些收费服务，个人开发者一般用不到。下面的介绍都针对社区版。")]),e._v(" "),t("p",[e._v("Docker CE 的安装请参考官方文档。")]),e._v(" "),t("blockquote",[t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/docker-for-mac/install/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mac"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.docker.com/docker-for-windows/install/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Windows"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.docker.com/install/linux/docker-ce/ubuntu/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ubuntu"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.docker.com/install/linux/docker-ce/debian/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Debian"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.docker.com/install/linux/docker-ce/centos/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CentOS"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.docker.com/install/linux/docker-ce/fedora/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Fedora"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.docker.com/install/linux/docker-ce/binaries/",target:"_blank",rel:"noopener noreferrer"}},[e._v("其他 Linux 发行版"),t("OutboundLink")],1)])])]),e._v(" "),t("p",[e._v("安装完成后，运行下面的命令，验证是否安装成功。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ docker version\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 或者")]),e._v("\n$ docker info\n")])])])]),e._v(" "),t("p",[e._v("Docker 需要用户具有 sudo 权限，为了避免每次命令都输入"),t("code",[e._v("sudo")]),e._v("，可以把用户加入 Docker 用户组（"),t("a",{attrs:{href:"https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),t("OutboundLink")],1),e._v("）。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("usermod")]),e._v(" -aG docker "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$USER")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("Docker 是服务器----客户端架构。命令行运行"),t("code",[e._v("docker")]),e._v("命令的时候，需要本机有 Docker 服务。如果这项服务没有启动，可以用下面的命令启动（"),t("a",{attrs:{href:"https://docs.docker.com/config/daemon/systemd/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),t("OutboundLink")],1),e._v("）。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# service 命令的用法")]),e._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" docker start\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# systemctl 命令的用法")]),e._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl start docker\n")])])])]),e._v(" "),t("h2",{attrs:{id:"八、image-文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八、image-文件"}},[e._v("#")]),e._v(" 八、image 文件")]),e._v(" "),t("p",[e._v("**Docker 把应用程序及其依赖，打包在 image 文件里面。**只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。")]),e._v(" "),t("p",[e._v("image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。")]),e._v(" "),t("blockquote",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 列出本机的所有 image 文件。")]),e._v("\n$ docker image "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 删除 image 文件")]),e._v("\n$ docker image "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("imageName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])])]),e._v(" "),t("p",[e._v("image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。")]),e._v(" "),t("p",[e._v("为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 "),t("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Hub"),t("OutboundLink")],1),e._v(" 是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。")]),e._v(" "),t("p",[e._v("参考文献：http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html")]),e._v(" "),t("p",[e._v("https://www.runoob.com/docker/docker-tutorial.html")])])}),[],!1,null,null,null);r.default=a.exports}}]);