(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{439:function(t,s,a){"use strict";a.r(s);var e=a(42),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),a("blockquote",[a("p",[t._v("正则表达式是由一个字符串序列形成的搜索模式")]),t._v(" "),a("p",[t._v("语法： /正则表达式主体/修饰符（可选）")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("修饰符")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("修饰符")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("i")]),t._v(" "),a("td",[t._v("执行对大小写不敏感的匹配")])]),t._v(" "),a("tr",[a("td",[t._v("g")]),t._v(" "),a("td",[t._v("执行全局匹配")])]),t._v(" "),a("tr",[a("td",[t._v("m")]),t._v(" "),a("td",[t._v("执行多行匹配")])]),t._v(" "),a("tr",[a("td",[t._v("s")]),t._v(" "),a("td",[t._v("特殊字符圆点 "),a("strong",[t._v(".")]),t._v(" 中包含换行符 "),a("strong",[t._v("\\n")])])])])]),t._v(" "),a("p",[t._v("m修饰符的作用是修改^和$在正则表达式中的作用，让它们分别表示行首和行尾，默认情况下，一个字符串不论是否换行只有一个开始^和一个结尾$，如果采用多行匹配，那么每一行都有一个^和$")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is an\\n antzone good'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("an$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//匹配不到，因为虽然加了/n，但是没有多行匹配，所以不是字符串的结尾")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is an\\n antzone good'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("an$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("m")])]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这样就可以匹配到了")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"正则表达式常用符号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式常用符号"}},[t._v("#")]),t._v(" 正则表达式常用符号")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("符号")])]),t._v(" "),a("th",[a("strong",[t._v("描述")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("\\s")])]),t._v(" "),a("td",[a("strong",[t._v("匹配任何的空白字符")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("\\S")])]),t._v(" "),a("td",[a("strong",[t._v("任何非空白字符")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("\\d")])]),t._v(" "),a("td",[a("strong",[t._v("匹配一个数字字符，等价于[0-9]")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("\\D")])]),t._v(" "),a("td",[a("strong",[t._v("除了数字之外的任何字符，等价于[^0-9")]),t._v("]")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("\\w")])]),t._v(" "),a("td",[a("strong",[t._v("匹配一个数字、下划线或字母字符，等价于[A-Za-z0-9_]")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("\\W")])]),t._v(" "),a("td",[a("strong",[t._v("任何非单字字符，等价于[^a-zA-z0-9_")]),t._v("]")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v(".")])]),t._v(" "),a("td",[a("strong",[t._v("匹配除了换行符之外的任意字符")])])])])]),t._v(" "),a("p",[t._v("大写的\\s、\\d、\\w与小写的意思正好正反")]),t._v(" "),a("h3",{attrs:{id:"限定符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#限定符"}},[t._v("#")]),t._v(" 限定符")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("符号")])]),t._v(" "),a("th",[a("strong",[t._v("描述")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("{n}")])]),t._v(" "),a("td",[a("strong",[t._v("匹配前一项n次")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("{n,}")])]),t._v(" "),a("td",[a("strong",[t._v("匹配前一项n次，或者多次")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("{n,m}")])]),t._v(" "),a("td",[a("strong",[t._v("匹配前一项至少n次，但是不能超过m次")])])]),t._v(" "),a("tr",[a("td",[t._v("*")]),t._v(" "),a("td",[a("strong",[t._v("匹配前一项0次或多次，等价于{0,}")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("+")])]),t._v(" "),a("td",[a("strong",[t._v("匹配前一项1次或多次，等价于{1,}")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("?")])]),t._v(" "),a("td",[a("strong",[t._v("匹配前一项0次或1次，也就是说前一项是可选的，等价于{0,1}")])])])])]),t._v(" "),a("h3",{attrs:{id:"特殊字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊字符"}},[t._v("#")]),t._v(" 特殊字符")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("符号")])]),t._v(" "),a("th",[a("strong",[t._v("描述")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("/…/")])]),t._v(" "),a("td",[a("strong",[t._v("代表一个模式的开始和结束")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("^")])]),t._v(" "),a("td",[a("strong",[t._v("匹配字符串的开始，即表示行的开始")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("$")])]),t._v(" "),a("td",[a("strong",[t._v("匹配字符串的结束，即表示行的结束")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("[  ]")])]),t._v(" "),a("td",[a("strong",[t._v("表示可匹配的列表")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("()")])]),t._v(" "),a("td",[a("strong",[t._v("() 表示捕获分组，() 会把每个分组里的匹配的值保存起来， 多个匹配值可以通过数字 n 来查看(n 是一个数字，表示第 n 个捕获组的内容)。")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("|")])]),t._v(" "),a("td",[a("strong",[t._v("表示或者")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("[ ^ ]")])]),t._v(" "),a("td",[a("strong",[t._v("在[  ]中的尖括号表示非")])])])])]),t._v(" "),a("h2",{attrs:{id:"定位符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定位符"}},[t._v("#")]),t._v(" 定位符")]),t._v(" "),a("p",[t._v("定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。")]),t._v(" "),a("p",[t._v("定位符用来描述字符串或单词的边界，"),a("strong",[t._v("^")]),t._v(" 和 "),a("strong",[t._v("$")]),t._v(" 分别指字符串的开始与结束，"),a("strong",[t._v("\\b")]),t._v(" 描述单词的前或后边界，"),a("strong",[t._v("\\B")]),t._v(" 表示非单词边界。")]),t._v(" "),a("p",[t._v("正则表达式的定位符有：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("字符")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("^")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \\n 或 \\r 之后的位置匹配。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("$")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \\n 或 \\r 之前的位置匹配。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\b")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("匹配一个单词边界，即字与空格间的位置。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("\\B")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("非单词边界匹配。")])])])]),t._v(" "),a("p",[a("strong",[t._v("注意")]),t._v("：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 "),a("strong",[t._v("^*")]),t._v(" 之类的表达式。")]),t._v(" "),a("p",[t._v("若要匹配一行文本开始处的文本，请在正则表达式的开始使用 "),a("strong",[t._v("^")]),t._v(" 字符。不要将 "),a("strong",[t._v("^")]),t._v(" 的这种用法与中括号表达式内的用法混淆。")]),t._v(" "),a("p",[t._v("若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 "),a("strong",[t._v("$")]),t._v(" 字符。")]),t._v(" "),a("h2",{attrs:{id:"选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择"}},[t._v("#")]),t._v(" 选择")]),t._v(" "),a("p",[t._v("用圆括号 "),a("strong",[t._v("()")]),t._v(" 将所有选择项括起来，相邻的选择项之间用 "),a("strong",[t._v("|")]),t._v(" 分隔。")]),t._v(" "),a("p",[a("strong",[t._v("()")]),t._v(" 表示捕获分组，"),a("strong",[t._v("()")]),t._v(" 会把每个分组里的匹配的值保存起来， 多个匹配值可以通过数字 n 来查看("),a("strong",[t._v("n")]),t._v(" 是一个数字，表示第 n 个捕获组的内容)。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2014/03/366574CC-3706-4B4C-8782-1BFF4CF57582.jpg",alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2014/03/82A7298A-2A94-49E3-AA27-A7778EE89711.jpg",alt:"img"}})]),t._v(" "),a("p",[t._v("但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用 "),a("strong",[t._v("?:")]),t._v(" 放在第一个选项前来消除这种副作用。")]),t._v(" "),a("p",[t._v("其中 "),a("strong",[t._v("?:")]),t._v(" 是非捕获元之一，还有两个非捕获元是 "),a("strong",[t._v("?=")]),t._v(" 和 "),a("strong",[t._v("?!")]),t._v("，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。")]),t._v(" "),a("h3",{attrs:{id:"以下列出-、-、-、-的使用区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#以下列出-、-、-、-的使用区别"}},[t._v("#")]),t._v(" 以下列出 ?=、?<=、?!、?<! 的使用区别")]),t._v(" "),a("p",[a("strong",[t._v("exp1(?=exp2)")]),t._v("：查找 exp2 前面的 exp1。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2014/03/reg-111.jpg",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("(?<=exp2)exp1")]),t._v("：查找 exp2 后面的 exp1。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2014/03/reg-222.jpg",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("exp1(?!exp2)")]),t._v("：查找后面不是 exp2 的 exp1。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2014/03/reg-333.jpg",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("(?<!exp2)exp1")]),t._v("：查找前面不是 exp2 的 exp1。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2014/03/reg-444.jpg",alt:"img"}})]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("更多内容可以参考：")]),a("a",{attrs:{href:"https://www.runoob.com/w3cnote/reg-lookahead-lookbehind.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则表达式的先行断言(lookahead)和后行断言(lookbehind)"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"反向引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反向引用"}},[t._v("#")]),t._v(" 反向引用")]),t._v(" "),a("p",[t._v("对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 "),a("strong",[t._v("\\n")]),t._v(" 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。")]),t._v(" "),a("p",[t._v("可以使用非捕获元字符 "),a("strong",[t._v("?:")]),t._v("、"),a("strong",[t._v("?=")]),t._v(" 或 "),a("strong",[t._v("?!")]),t._v(" 来重写捕获，忽略对相关匹配的保存。")]),t._v(" "),a("p",[t._v("反向引用的最简单的、最有用的应用之一，是提供查找文本中两个相同的相邻单词的匹配项的能力。以下面的句子为例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Is is the cost of of gasoline going up up?\n")])])]),a("p",[t._v("上面的句子很显然有多个重复的单词。如果能设计一种方法定位该句子，而不必查找每个单词的重复出现，那该有多好。下面的正则表达式使用单个子表达式来实现这一点：")]),t._v(" "),a("h4",{attrs:{id:"实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[t._v("#")]),t._v(" 实例")]),t._v(" "),a("p",[t._v("查找重复的单词：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Is is the cost of of gasoline going up up"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" patt1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\b([a-z]+) \\1\\b")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("ig")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("patt1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("a",{attrs:{href:"https://www.runoob.com/try/try.php?filename=tryjsref_regexp3",target:"_blank",rel:"noopener noreferrer"}},[t._v("尝试一下 »"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("捕获的表达式，正如 "),a("strong",[t._v("[a-z]+")]),t._v(" 指定的，包括一个或多个字母。正则表达式的第二部分是对以前捕获的子匹配项的引用，即，单词的第二个匹配项正好由括号表达式匹配。"),a("strong",[t._v("\\1")]),t._v(" 指定第一个子匹配项。")]),t._v(" "),a("p",[t._v('单词边界元字符确保只检测整个单词。否则，诸如 "is issued" 或 "this is" 之类的词组将不能正确地被此表达式识别。')]),t._v(" "),a("p",[t._v("正则表达式后面的全局标记 "),a("strong",[t._v("g")]),t._v(" 指定将该表达式应用到输入字符串中能够查找到的尽可能多的匹配。")]),t._v(" "),a("p",[t._v("表达式的结尾处的不区分大小写 "),a("strong",[t._v("i")]),t._v(" 标记指定不区分大小写。")]),t._v(" "),a("p",[t._v("多行标记指定换行符的两边可能出现潜在的匹配。")]),t._v(" "),a("h2",{attrs:{id:"javascript-replace-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-replace-方法"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://www.w3school.com.cn/jsref/jsref_replace.asp",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript replace() 方法"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。")]),t._v(" "),a("h3",{attrs:{id:"语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("stringObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regexp"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("substr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("replacement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("字符串 stringObject 的 replace() 方法执行的是查找并替换的操作。它将在 stringObject 中查找与 regexp 相匹配的子字符串，然后用 "),a("em",[t._v("replacement")]),t._v(" 来替换这些子串。如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。")]),t._v(" "),a("p",[a("em",[t._v("replacement")]),t._v(" 可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $ 字符具有特定的含义。如下表所示，它说明从模式匹配得到的字符串将用于替换。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("字符")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("替换文本")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("$1、$2、...、$99")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("$&")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("与 regexp 相匹配的子串。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("$`")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("位于匹配子串左侧的文本。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("$'")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("位于匹配子串右侧的文本。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("$$")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("直接量符号。")])])])]),t._v(" "),a("p",[t._v("**注意：**ECMAScript v3 规定，replace() 方法的参数 replacement 可以是函数而不是字符串。在这种情况下，每个匹配都调用该函数，它返回的字符串将作为替换文本使用。该函数的第一个参数是匹配模式的字符串。接下来的参数是与模式中的子表达式匹配的字符串，可以有 0 个或多个这样的参数。接下来的参数是一个整数，声明了匹配在 stringObject 中出现的位置。最后一个参数是 stringObject 本身。")]),t._v(" "),a("p",[t._v("在本例中，我们将把字符串中所有单词的首字母都转换为大写：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'aaa bbb ccc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nuw"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\b\\w+\\b")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("word")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" word"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("word"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("将数字转换成千分位展示:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d{1,3}(?=(\\d{3})+$)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$&,'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正则表达式 \\d{1,3}(?=(\\d{3})+$)  表示前面有1~3个数字，后面的至少由一组3个数字结尾")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ?=表示正向引用，可以作为匹配的条件，但匹配到的内容不获取，并且作为下一次查询的开始")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// $& 表示与正则表达式相匹配的内容")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);